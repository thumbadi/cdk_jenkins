<dependencies>
    <!-- AWS SDK for S3 -->
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>s3</artifactId>
        <version>2.20.0</version>
    </dependency>

    <!-- Apache Parquet -->
    <dependency>
        <groupId>org.apache.parquet</groupId>
        <artifactId>parquet-avro</artifactId>
        <version>1.12.3</version>
    </dependency>

    <!-- Avro for Parquet -->
    <dependency>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro</artifactId>
        <version>1.11.1</version>
    </dependency>

    <!-- Spring Boot for Web Application -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <version>3.1.0</version>
    </dependency>

    <!-- Logging -->
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>2.0.7</version>
    </dependency>
</dependencies>

------------

package com.example.parquetreader;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ParquetReaderApplication {
    public static void main(String[] args) {
        SpringApplication.run(ParquetReaderApplication.class, args);
    }
}

-----------------------

package com.example.parquetreader.controller;

import com.example.parquetreader.service.ParquetService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class ParquetController {

    @Autowired
    private ParquetService parquetService;

    @GetMapping("/read-parquet")
    public List<String> readParquet(@RequestParam String bucketName, @RequestParam String key) {
        return parquetService.readParquetFile(bucketName, key);
    }
}

--------------------

package com.example.parquetreader.service;

import org.apache.avro.generic.GenericRecord;
import org.apache.parquet.avro.AvroParquetReader;
import org.apache.parquet.hadoop.ParquetReader;
import software.amazon.awssdk.core.ResponseInputStream;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import software.amazon.awssdk.services.s3.model.GetObjectResponse;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class ParquetService {

    private final S3Client s3Client;

    public ParquetService() {
        this.s3Client = S3Client.create();
    }

    public List<String> readParquetFile(String bucketName, String key) {
        List<String> records = new ArrayList<>();

        // Download the Parquet file from S3
        GetObjectRequest getObjectRequest = GetObjectRequest.builder()
                .bucket(bucketName)
                .key(key)
                .build();

        try (ResponseInputStream<GetObjectResponse> s3Object = s3Client.getObject(getObjectRequest);
             InputStream inputStream = s3Object) {

            // Read the Parquet file
            try (ParquetReader<GenericRecord> reader = AvroParquetReader.<GenericRecord>builder(new ParquetInputFile(inputStream)).build()) {
                GenericRecord record;
                while ((record = reader.read()) != null) {
                    records.add(record.toString());
                }
            }
        } catch (IOException e) {
            throw new RuntimeException("Failed to read Parquet file from S3", e);
        }

        return records;
    }
}

----------------

package com.example.parquetreader.service;

import org.apache.parquet.io.InputFile;
import org.apache.parquet.io.SeekableInputStream;

import java.io.IOException;
import java.io.InputStream;

public class ParquetInputFile implements InputFile {

    private final InputStream inputStream;

    public ParquetInputFile(InputStream inputStream) {
        this.inputStream = inputStream;
    }

    @Override
    public long getLength() throws IOException {
        return inputStream.available();
    }

    @Override
    public SeekableInputStream newStream() throws IOException {
        return new SeekableInputStream() {
            @Override
            public long getPos() throws IOException {
                return 0;
            }

            @Override
            public void seek(long newPos) throws IOException {
                throw new UnsupportedOperationException("Seek not supported");
            }

            @Override
            public int read() throws IOException {
                return inputStream.read();
            }

            @Override
            public int read(byte[] b, int off, int len) throws IOException {
                return inputStream.read(b, off, len);
            }
        };
    }
}

--------------------

